<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- parent -->
	<parent>
		<groupId>org.jredis</groupId>
		<artifactId>jredis-core</artifactId>
		<version>a.0-SNAPSHOT</version>
	</parent>

	<!-- production | jar -->
	<!-- NOTE: this something of a hack and perhaps there is a standard way 
		to do it in maven: the 'core-all' is an empty module that simply requires 
		all the other (functional) modules of core and its production creates a jar 
		with all the core classes included. (Assembly is probably what I am looking 
		for .. -->

	<name>JRedis - Core - ALL [Jar POM]</name>
	<artifactId>jredis-core-all</artifactId>
	<packaging>jar</packaging>

	<dependencies>
		<!-- declare dependency on all core modules for dependency jar -->
		<!-- api -->
		<dependency>
			<groupId>org.jredis</groupId>
			<artifactId>jredis-core-api</artifactId>
			<version>a.0-SNAPSHOT</version>
		</dependency>

		<!-- ri -->
		<dependency>
			<groupId>org.jredis</groupId>
			<artifactId>jredis-core-ri</artifactId>
			<version>a.0-SNAPSHOT</version>
		</dependency>

		<!-- bench -->
		<dependency>
			<groupId>org.jredis</groupId>
			<artifactId>jredis-core-bench</artifactId>
			<version>a.0-SNAPSHOT</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<executions>
					<execution>
						<id>simple-install</id>
						<phase>package</phase>
						<goals>
							<goal>attached</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
